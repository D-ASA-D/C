#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <windows.h>

int* deleteBelowAverage(int* row) {
    int size = row[0];
    if (size == 0) return row;

    int sum = 0;
    for (int i = 1; i <= size; i++) {
        sum += row[i];
    }
    double avg = (double)sum / size;

    int newSize = 0;
    for (int i = 1; i <= size; i++) {
        if (row[i] >= avg) {
            row[++newSize] = row[i];
        }
    }

    row = realloc(row, (newSize + 1) * sizeof(int));
    row[0] = newSize;
    return row;
}

int* addElements(int* row, int N, int K) {
    int size = row[0];
    int newSize = size + N;

    row = realloc(row, (newSize + 1) * sizeof(int));
    for (int i = size; i >= K; i--) {
        row[i + N] = row[i];
    }
    for (int i = K; i < K + N; i++) {
        row[i] = rand() % 100;
    }
    row[0] = newSize;
    return row;
}

int* shiftZeros(int* row, int M) {
    int size = row[0];
    for (int i = size; i > 0; i--) {
        if (row[i] == 0) {
            for (int j = i; j < size && j < i + M; j++) {
                int temp = row[j];
                row[j] = row[j + 1];
                row[j + 1] = temp;
            }
        }
    }
    return row;
}

int* zeroElementsEqualAverage(int* row) {
    int size = row[0];
    if (size == 0) return row;

    int sum = 0;
    for (int i = 1; i <= size; i++) {
        sum += row[i];
    }
    double avg = (double)sum / size;

    for (int i = 1; i <= size; i++) {
        if (row[i] == (int)avg) {
            row[i] = 0;
        }
    }
    return row;
}

void freeArray(int** array, int A) {
    for (int i = 0; i < A; i++) {
        free(array[i]);
    }
    free(array);
}

int main() {
    system("color F0");
    SetConsoleOutputCP(1251);

    int A, B, min, max, N, K, M;
    printf("Ââåäèòå äëèííó ìàññèâà (A): ");
    scanf("%d", &A);
    printf("Ââåäèòå äëèííó ìàññèâà (B): ");
    scanf("%d", &B);
    printf("Ââåäèòå íà÷àëî èíòåðâàëà: ");
    scanf("%d", &min);
    printf("Ââåäèòå êîíåö èíòåðâàëà: ");
    scanf("%d", &max);

    if (min > max) {
        printf("Ìèíèìóì áîëüøå ìàêñèìóìà\n");
        return 1;
    }

    int** array = (int**)malloc(A * sizeof(int*));
    if (array == NULL) {
        printf("Error\n");
        return 1;
    }

    for (int i = 0; i < A; i++) {
        array[i] = (int*)malloc((B + 1) * sizeof(int)); 
        if (array[i] == NULL) {
            printf("Error %d\n", i + 1);
            return 1;
        }

        array[i][0] = B; 
        for (int j = 1; j <= B; j++) {
            array[i][j] = min + rand() % (max - min + 1); 
        }
    }

    printf("Ââåäèòå êîëè÷åñòâî ñëó÷àéíûõ ýëåìåíòîâ (N): ");
    scanf("%d", &N);
    printf("Ââåäèòå íîìåð ïîñëå êàêîãî âñòàâèòü ñëó÷àéíûå ýëåìåíòû (K): ");
    scanf("%d", &K);
    printf("Íà ñêîëüêî ýëåìåíòîâ ñäâèíóòü íóëåâûå ýëåìåíòû (M): ");
    scanf("%d", &M);

    printf("\nÈñõîäíûé ìàññèâ:\n");
    for (int i = 0; i < A; i++) {
        printf("Íîìåð ñòðîêè %d (Êîëè÷åñòâî ýëëåìåíòîâ %d): ", i + 1, array[i][0]);
        for (int j = 1; j <= array[i][0]; j++) {
            printf("%d ", array[i][j]);
        }
        printf("\n");
    }

    for (int i = 0; i < A; i++) {
        if (i % 4 == 0) { 
            array[i] = deleteBelowAverage(array[i]);
            printf("Óäàëåíû ýëåìåíòû ìåíüøå ñðåäíåãî àðåôìåòè÷åñêîãî èç ñòðîêè %d.\n", i + 1);
        } else if (i % 4 == 1) {
            array[i] = addElements(array[i], N, K);
            printf("Äîáàâëåíî %d ñëó÷àéíûõ ýëåìåíòîâ íà÷èíàÿ ñ ïîçèöèè %d â ñòðîêó %d.\n", N, K, i + 1);
        } else if (i % 4 == 2) {
            array[i] = shiftZeros(array[i], M);
            printf("Ñäâèíóòû íóëåâûå ýëåìåíòû íà %d ïîçèöèé â ïðàâî â ñòðîêå %d.\n", M, i + 1);
        } else if (i % 4 == 3) { 
            array[i] = zeroElementsEqualAverage(array[i]);
            printf("Çàíóëåíû ýëåìåíòû ðàâíûå ñðåäíåìó àðèôìåòè÷åñêîìó â ñòðîêå %d.\n", i + 1);
        }
    }

    printf("\nÌîäèôèöèðîâàííûé ìàññèâ:\n");
    for (int i = 0; i < A; i++) {
        printf("Ñòðîêà %d (ñ ðàçìåðîì %d): ", i + 1, array[i][0]);
        for (int j = 1; j <= array[i][0]; j++) {
            printf("%d ", array[i][j]);
        }
        printf("\n");
    }

    freeArray(array, A);

    return 0;
}
